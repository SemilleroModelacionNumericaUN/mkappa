% -------------------------------------------------------------------------% PEFiCA: Programa de análisis no lineal a flexión de secciones versión 1.0%% -------------------------------------------------------------------------% Juan E. Torres D. & Dorian L. Linero S.% Universidad Nacional de Colombia% Facultad de Ingeniería% Todos los derechos reservados, 2019function MKAPPA (ADAT,TLEC)% ADAT: nombre del archivo de entrada de datos sin extensión% TLEC: identificador de la opción de lectura de datos. Este es un parámetro%       que por defecto es igual a 0.% ------------------------------------------------------------------------------% presentación inicial en pantallaclc; % limpiar pantallafprintf('----------------------------------------------------------------- \n');fprintf('       MKAPPA 1.0. Universidad Nacional de Colombia 2020          \n');fprintf('----------------------------------------------------------------- \n');fprintf('=10: opcion habilitada \n');fprintf('=11: otras opciones no habilitadas \n');fprintf('=12: otras opciones no habilitadas \n');fprintf('Si <opciones lectura> se omite adquiere un valor de 10. \n');fprintf('------------------------------------------------------------------\n');  % ------------------------------------------------------------------------------    % control de ausencia de argumentos  if exist('ADAT') == 0    fprintf('MKAPPA. La funcion requiere <nombre archivo datos>.\n')    return  end  if exist('TLEC') == 0    TLEC='10';    fprintf('MKAPPA. La funcion tomará por defecto a <opciones lectura>=10.\n')  end  ADAD = strcat('./DATOS/',ADAT);  TLEN = str2num(TLEC);    % adicionar carpetas y tomar tiempo inicial  addpath('./FUNCIONES');  addpath('./DATOS');   TINT = IMTIEM('Inicio de ejecucion del programa \n',0);    TINI = IMTIEM('Lectura de datos de archivos .m y .msh de GMSH \n',0);  % -------------------------------------------------------------------------  if TLEN==10    % opción habilitada    % lectura de entrada de datos de archivo .m    run(ADAT); % crea las tablas MAT, FLE, y ANA    % opción de lectura de entrada de datos de archivo .msh de GMSH    [NNUD,NELE,NCAT,NNUE,XYZ,ELE,CAT,SUP] = LEGMSH(ADAD);    % construcción de tabla completa de categorías donde el número de la fila    % corresponde con el número de la categoría asociado al elemento en la     % primera columna de la tabla de conectividades ELE.    [CAE] = CATEGO(CAT,MAT);        % indicador de parámetros de la malla    NPAS = ANA(20); % número de pasos    fprintf('Malla de %g nudos, %g elementos y %g pasos ', NNUD,NELE,NPAS);  else    % opciones no habilitadas       end %endif  TFIN = IMTIEM('',TINI);  % -------------------------------------------------------------------------    TINI = IMTIEM('Analisis por incrementos de curvatura \n',0);  % -------------------------------------------------------------------------    % abrir archivo .pos  GMSH = strcat(ADAD,'.pos'); % nombre archivo GMSH .pos de los resultados  FIDE = fopen(GMSH,'w'); % abrir archivo y establecer identificador    % escribir geometría de la malla en .pos  IMPGEO(FIDE,NNUD,NELE,NNUE,NCAT,XYZ,ELE,SUP);    for IPAS = 1:NPAS    TEXT = strcat('... paso:',int2str(IPAS)); TINI = IMTIEM(TEXT,0);    % calcular    % ...    % tabla de resultados por elemento de un paso    % [ EPZZ STZZ ESTA ]    REL = zeros(NELE,3);    REL = rand(NELE,3); % NUMEROS ALETORIOS PARA PROBAR        % escribir resultados en .pos    STEP = IPAS-1; % el paso en GMSH empieza en 0    TIME = STEP;   % el tiempo en GMSH puede representar otra variable    IMPREL(FIDE,NNUD,NELE,NNUE,NCAT,XYZ,ELE,SUP,REL,TIME,STEP);        TFIN = IMTIEM('',TINI);  end % endfor IPAS    status = fclose(FIDE); % cierre de archivo .pos  % -------------------------------------------------------------------------    % curva de resultados en función del tiempo  % [ XPAS YPAS ]  CUR = zeros(NPAS,2);  % CURVA INVENTADA  for IPAS=1:NPAS    CUR(IPAS,1) = IPAS*0.1; CUR(IPAS,2)=IPAS*0.1;  end    % abrir archivo .pos.opt y escribir curva M-kappa  IMPOPT(ADAD,CUR);      % mostrar tiempo final  TFIN = IMTIEM('Tiempo total de ejecucion del programa ',TINT);end